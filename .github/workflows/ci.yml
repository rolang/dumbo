# This file was automatically generated by sbt-github-actions using the
# githubWorkflowGenerate task. You should add and commit this file to
# your git repository. It goes without saying that you shouldn't edit
# this file by hand! Instead, if you wish to make changes, you should
# change your sbt build configuration to revise the workflow description
# to meet your needs, then regenerate this file.

name: Continuous Integration

on:
  pull_request:
    branches: ['**', '!update/**', '!pr/**']
  push:
    branches: ['**', '!update/**', '!pr/**']
    tags: [v*]

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


concurrency:
  group: ${{ github.workflow }} @ ${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Test
    strategy:
      matrix:
        os: [ubuntu-22.04, macos-13, macos-14]
        scala: [3, 2.13]
        java: [temurin@21, temurin@17]
        project: [rootJVM, rootNative]
        exclude:
          - scala: 2.13
            java: temurin@17
          - project: rootNative
            java: temurin@17
          - os: macos-13
            project: rootJVM
          - os: macos-14
            project: rootJVM
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    steps:
      - name: Checkout current branch (full)
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup sbt
        uses: sbt/setup-sbt@v1

      - name: Setup Java (temurin@21)
        id: setup-java-temurin-21
        if: matrix.java == 'temurin@21'
        uses: actions/setup-java@v5
        with:
          distribution: temurin
          java-version: 21
          cache: sbt

      - name: sbt update
        if: matrix.java == 'temurin@21' && steps.setup-java-temurin-21.outputs.cache-hit == 'false'
        run: sbt +update

      - name: Setup Java (temurin@17)
        id: setup-java-temurin-17
        if: matrix.java == 'temurin@17'
        uses: actions/setup-java@v5
        with:
          distribution: temurin
          java-version: 17
          cache: sbt

      - name: sbt update
        if: matrix.java == 'temurin@17' && steps.setup-java-temurin-17.outputs.cache-hit == 'false'
        run: sbt +update

      - name: Install native dependencies (ubuntu)
        if: (matrix.project == 'rootNative') && startsWith(matrix.os, 'ubuntu')
        run: |
          /home/linuxbrew/.linuxbrew/bin/brew install llvm@20 s2n utf8proc
          echo "LLVM_BIN=/home/linuxbrew/.linuxbrew/opt/llvm@20/bin" >> $GITHUB_ENV

      - name: Install native dependencies (macos-13)
        if: (matrix.project == 'rootNative') && matrix.os == 'macos-13'
        run: |
          brew install llvm@20 s2n utf8proc
          echo "LLVM_BIN=/usr/local/opt/llvm@20/bin" >> $GITHUB_ENV

      - name: Install native dependencies (macos-14)
        if: (matrix.project == 'rootNative') && matrix.os == 'macos-14'
        run: |
          brew install llvm@20 s2n utf8proc
          echo "LLVM_BIN=/opt/homebrew/opt/llvm@20/bin" >> $GITHUB_ENV

      - name: Check that workflows are up to date
        run: sbt githubWorkflowCheck

      - name: Check scalafix/scalafmt lints
        if: matrix.java == 'temurin@21' && (matrix.scala == '3') && matrix.project == 'rootJVM' && startsWith(matrix.os, 'ubuntu')
        run: sbt 'project ${{ matrix.project }}' '++ ${{ matrix.scala }}' 'Test/copyResources; scalafixAll --check; all scalafmtSbtCheck scalafmtCheckAll'

      - name: Check headers and formatting
        if: matrix.java == 'temurin@21' && matrix.os == 'ubuntu-22.04'
        run: sbt 'project ${{ matrix.project }}' '++ ${{ matrix.scala }}' headerCheckAll scalafmtCheckAll 'project /' scalafmtSbtCheck

      - name: nativeLink
        if: matrix.project == 'rootNative'
        run: sbt 'project ${{ matrix.project }}' '++ ${{ matrix.scala }}' Test/nativeLink

      - name: Start up Postgres
        if: startsWith(matrix.os, 'ubuntu')
        run: docker compose up -d

      - name: Test
        if: startsWith(matrix.os, 'ubuntu')
        run: sbt 'project ${{ matrix.project }}' '++ ${{ matrix.scala }}' test

      - name: Check binary compatibility
        if: matrix.java == 'temurin@21' && matrix.os == 'ubuntu-22.04'
        run: sbt 'project ${{ matrix.project }}' '++ ${{ matrix.scala }}' mimaReportBinaryIssues

      - name: Generate API documentation
        if: matrix.java == 'temurin@21' && matrix.os == 'ubuntu-22.04'
        run: sbt 'project ${{ matrix.project }}' '++ ${{ matrix.scala }}' doc

      - name: CLI test
        if: matrix.project == 'rootNative' && (matrix.scala == '3')
        run: sbt cliNative/test

      - name: Generate CLI native binary (ubuntu, debug)
        if: matrix.project == 'rootNative' && (matrix.scala == '3') && startsWith(matrix.os, 'ubuntu') && !startsWith(github.ref, 'refs/tags/')
        run: sbt buildCliBinary

      - name: Generate CLI native binary (ubuntu, release)
        if: matrix.project == 'rootNative' && (matrix.scala == '3') && startsWith(matrix.os, 'ubuntu') && startsWith(github.ref, 'refs/tags/')
        env:
          SCALANATIVE_MODE: release-fast
          SCALANATIVE_LTO: thin
        run: sbt buildCliBinary

      - name: Generate CLI native binary (macos, debug)
        if: matrix.project == 'rootNative' && (matrix.scala == '3') && startsWith(matrix.os, 'macos') && !startsWith(github.ref, 'refs/tags/')
        run: sbt buildCliBinary

      - name: Generate CLI native binary (macos, release)
        if: matrix.project == 'rootNative' && (matrix.scala == '3') && startsWith(matrix.os, 'macos') && startsWith(github.ref, 'refs/tags/')
        env:
          SCALANATIVE_MODE: release-fast
        run: sbt buildCliBinary

      - name: Upload command line binaries
        if: matrix.project == 'rootNative' && (matrix.scala == '3') && startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v4
        with:
          name: cli-bin-${{ matrix.os }}
          path: modules/cli/native/target/bin/*

      - name: Run example (covers reading resources from a jar at runtime)
        if: matrix.project == 'rootJVM' && matrix.scala == '3'
        run: sbt 'project ${{ matrix.project }}' '++ ${{ matrix.scala }}' 'example/runMain ExampleApp'

      - name: Test reading resources from a jar at compile time
        if: matrix.project == 'rootJVM' && matrix.scala == '3'
        run: sbt -Dsample_lib_test 'testLib/clean; sampleLib/publishLocal; testLib/run'

      - name: Make target directories
        if: github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main')
        run: mkdir -p modules/core/native/target modules/core/jvm/target modules/cli/native/target project/target

      - name: Compress target directories
        if: github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main')
        run: tar cf targets.tar modules/core/native/target modules/core/jvm/target modules/cli/native/target project/target

      - name: Upload target directories
        if: github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main')
        uses: actions/upload-artifact@v4
        with:
          name: target-${{ matrix.os }}-${{ matrix.java }}-${{ matrix.scala }}-${{ matrix.project }}
          path: targets.tar

  publish:
    name: Publish Artifacts
    needs: [build]
    if: github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main')
    strategy:
      matrix:
        os: [ubuntu-22.04]
        java: [temurin@21]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout current branch (full)
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup sbt
        uses: sbt/setup-sbt@v1

      - name: Setup Java (temurin@21)
        id: setup-java-temurin-21
        if: matrix.java == 'temurin@21'
        uses: actions/setup-java@v5
        with:
          distribution: temurin
          java-version: 21
          cache: sbt

      - name: sbt update
        if: matrix.java == 'temurin@21' && steps.setup-java-temurin-21.outputs.cache-hit == 'false'
        run: sbt +update

      - name: Setup Java (temurin@17)
        id: setup-java-temurin-17
        if: matrix.java == 'temurin@17'
        uses: actions/setup-java@v5
        with:
          distribution: temurin
          java-version: 17
          cache: sbt

      - name: sbt update
        if: matrix.java == 'temurin@17' && steps.setup-java-temurin-17.outputs.cache-hit == 'false'
        run: sbt +update

      - name: Download target directories (3, rootJVM)
        uses: actions/download-artifact@v4
        with:
          name: target-${{ matrix.os }}-${{ matrix.java }}-3-rootJVM

      - name: Inflate target directories (3, rootJVM)
        run: |
          tar xf targets.tar
          rm targets.tar

      - name: Download target directories (3, rootNative)
        uses: actions/download-artifact@v4
        with:
          name: target-${{ matrix.os }}-${{ matrix.java }}-3-rootNative

      - name: Inflate target directories (3, rootNative)
        run: |
          tar xf targets.tar
          rm targets.tar

      - name: Download target directories (2.13, rootJVM)
        uses: actions/download-artifact@v4
        with:
          name: target-${{ matrix.os }}-${{ matrix.java }}-2.13-rootJVM

      - name: Inflate target directories (2.13, rootJVM)
        run: |
          tar xf targets.tar
          rm targets.tar

      - name: Download target directories (2.13, rootNative)
        uses: actions/download-artifact@v4
        with:
          name: target-${{ matrix.os }}-${{ matrix.java }}-2.13-rootNative

      - name: Inflate target directories (2.13, rootNative)
        run: |
          tar xf targets.tar
          rm targets.tar

      - name: Import signing key
        if: env.PGP_SECRET != '' && env.PGP_PASSPHRASE == ''
        env:
          PGP_SECRET: ${{ secrets.PGP_SECRET }}
          PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
        run: echo $PGP_SECRET | base64 -d -i - | gpg --import

      - name: Import signing key and strip passphrase
        if: env.PGP_SECRET != '' && env.PGP_PASSPHRASE != ''
        env:
          PGP_SECRET: ${{ secrets.PGP_SECRET }}
          PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
        run: |
          echo "$PGP_SECRET" | base64 -d -i - > /tmp/signing-key.gpg
          echo "$PGP_PASSPHRASE" | gpg --pinentry-mode loopback --passphrase-fd 0 --import /tmp/signing-key.gpg
          (echo "$PGP_PASSPHRASE"; echo; echo) | gpg --command-fd 0 --pinentry-mode loopback --change-passphrase $(gpg --list-secret-keys --with-colons 2> /dev/null | grep '^sec:' | cut --delimiter ':' --fields 5 | tail -n 1)

      - name: Publish
        env:
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
          SONATYPE_CREDENTIAL_HOST: ${{ secrets.SONATYPE_CREDENTIAL_HOST }}
        run: sbt tlCiRelease

  publish-cli-bin:
    name: Publish command line binaries
    needs: [build]
    if: startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        os: [ubuntu-22.04]
        java: [temurin@21]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Download command line binaries
        uses: actions/download-artifact@v4
        with:
          pattern: cli-bin-*
          path: target-cli/bin
          merge-multiple: true

      - name: Upload release binaries
        uses: softprops/action-gh-release@v1
        with:
          files: target-cli/bin/*

  publish-cli-docker:
    name: Publish command line docker image
    needs: [build]
    if: startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        os: [ubuntu-22.04]
        java: [temurin@21]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout current branch (fast)
        uses: actions/checkout@v5

      - name: Download command line linux build
        uses: actions/download-artifact@v4
        with:
          name: target-${{ matrix.os }}-${{ matrix.java }}-3-rootNative

      - name: Inflate command line linux build
        run: |
          tar xf targets.tar
          rm targets.tar

      - name: Release docker image
        env:
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo -n "${DOCKER_PASSWORD}" | docker login docker.io -u rolang --password-stdin
          export RELEASE_TAG=${GITHUB_REF_NAME#'v'}
          cp -r modules/cli/native/target/bin docker-build/bin
          docker build ./docker-build -t rolang/dumbo:${RELEASE_TAG}-alpine
          docker run rolang/dumbo:${RELEASE_TAG}-alpine
          docker tag rolang/dumbo:${RELEASE_TAG}-alpine rolang/dumbo:latest-alpine
          docker push rolang/dumbo:${RELEASE_TAG}-alpine
          docker push rolang/dumbo:latest-alpine

  dependency-submission:
    name: Submit Dependencies
    if: github.event.repository.fork == false && github.event_name != 'pull_request'
    strategy:
      matrix:
        os: [ubuntu-22.04]
        java: [temurin@21]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout current branch (full)
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup sbt
        uses: sbt/setup-sbt@v1

      - name: Setup Java (temurin@21)
        id: setup-java-temurin-21
        if: matrix.java == 'temurin@21'
        uses: actions/setup-java@v5
        with:
          distribution: temurin
          java-version: 21
          cache: sbt

      - name: sbt update
        if: matrix.java == 'temurin@21' && steps.setup-java-temurin-21.outputs.cache-hit == 'false'
        run: sbt +update

      - name: Setup Java (temurin@17)
        id: setup-java-temurin-17
        if: matrix.java == 'temurin@17'
        uses: actions/setup-java@v5
        with:
          distribution: temurin
          java-version: 17
          cache: sbt

      - name: sbt update
        if: matrix.java == 'temurin@17' && steps.setup-java-temurin-17.outputs.cache-hit == 'false'
        run: sbt +update

      - name: Submit Dependencies
        uses: scalacenter/sbt-dependency-submission@v2
        with:
          modules-ignore: sample-lib_3 dumbo_3 dumbo_2.13 testsflyway_3 testsflyway_2.13 dumbo_3 dumbo_2.13 dumbo_3 dumbo_2.13 tests_3 tests_2.13 example_3 sample-lib-test_3 tests_native0.4_3 tests_native0.4_2.13
          configs-ignore: test scala-tool scala-doc-tool test-internal
